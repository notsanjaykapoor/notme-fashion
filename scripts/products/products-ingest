#!/usr/bin/env python

import csv
import os
import re
import subprocess
import sys

sys.path.insert(1, os.path.join(sys.path[0], "../.."))

import dot_init

import click
import ulid

import models
import services.database
import services.grailed
import services.products
import services.products.images
import services.users

DEFAULT_FILE_ID = "1D0EYwL8X2CygW8CsECfN8uv0HUjWsjzR3dco6v3OPUU"

@click.group()
def cli():
    pass


@click.command()
@click.option("--file-id", default=None, required=True, help="google file id")
@click.option("--file-output", default="products.csv", required=False, help="output file name")
@click.option("--user", "user_email", default="notsanjaykapoor@gmail.com", required=False, help="user email")
def csv_sheet(file_id: str, file_output: str, user_email: str):
    """
    Ingest csv from google sheet
    """
    _print_status(f"file '{file_id}' download '{file_output}' try")

    if not os.path.exists(file_output):
        response = subprocess.run(
            f"wget --output-document={file_output} https://docs.google.com/spreadsheets/d/{file_id}/export?format=csv",
            shell=True,
            capture_output=False,
        )

        if response.returncode != 0:
            _print_error(f"wget error {response}")
            exit(response.returncode)

    _print_ok(f"file download '{file_output}' completed")

    with open(file_output) as csvfile:
        reader = csv.DictReader(csvfile)
        for row in reader:
            product_name = row.get("name", "").strip().lower()
            image_urls = [s.strip() for s in row.get("images").split(",") if s.strip().startswith("https:")]

            if not product_name or not image_urls:
                continue

            print(row)

            grailed_id = int(row.get("grailed_id", "0").strip() or 0)

            product_brand_model = row.get("brand / model", "").strip().lower()
            product_brand, product_model = [str(s).strip().lower() for s in product_brand_model.split("/", 1)]

            product_cats = [s.strip().lower() for s in row.get("category", "").split(",") if s.strip()]
            product_tags = [s.strip().lower() for s in row.get("tags", "").split(",") if s.strip()]

            product_color_size = row.get("color / size", "").strip().lower()
            product_color, product_size = [str(s).strip().lower() for s in product_color_size.split("/", 1)]

            product_material = row.get("material", "").strip().lower()
            product_season = row.get("season", "").strip().lower()
            product_stockist = row.get("stockist", "").strip().lower()

            product_state = models.product.STATE_DRAFT

            with services.database.session.get() as db_session:
                user = services.users.get_by_email(db_session=db_session, email=user_email)

                if grailed_id:
                    product = services.products.get_by_grailed_id(
                        db_session=db_session,
                        grailed_id=grailed_id,
                    )
                else:
                    product = None

                    # find product using narrowing queries
                    queries = [
                        f"name:{product_name} brand:{product_brand}",
                        f"name:{product_name} brand:{product_brand} color:{product_color}",
                    ]

                    find_result = services.products.find_by_queries(
                        db_session=db_session,
                        queries=queries,
                    )

                    if find_result.code == 422:
                        # too many product matches were found
                        _print_error(f"product query '{find_result.query}' found matches")
                        continue

                    if find_result.code == 0:
                        # found a matching product
                        product = find_result.objects[0]
                        query = find_result.query

                product_data = {
                    "color": product_color,
                    "material": product_material,
                    "model": product_model,
                    "season": product_season,
                    "size": product_size,
                    "stockist": product_stockist,
                }

                if product:
                    # preserve product state
                    product_state = product.state
                    product_code = 200
                    _print_status(f"product {product.id} exists - query '{query}'")
                else:
                    product = services.products.create(
                        db_session=db_session,
                        grailed_id=grailed_id,
                        key=ulid.new().str,
                        name=product_name,
                        source_id=ulid.new().str,
                        source_name=models.product.SOURCE_NOTME,
                        state=product_state,
                        user_id=user.id,
                    )
                    product_code = 201

                    _print_ok(f"product {product.id} created")

                # create product images iff its a new product

                if product_code == 201:
                    for image_url in image_urls:
                        code, image = services.products.images.create(
                            db_session=db_session,
                            product=product,
                            folder="/products",
                            url=image_url,
                        )

                        if code == 409:
                            _print_status(f"product {product.id} image {image.id} exists")
                        else:
                            _print_ok(f"product {product.id} image {image.id} created")

                services.products.update(
                    db_session=db_session,
                    product=product,
                    data=product_data,
                    brands=[product_brand],
                    categories=product_cats,
                    tags=product_tags,
                )

                services.products.sync_images(
                    db_session=db_session,
                    product=product,
                )

                if product.state != product_state:
                    product.state = product_state
                    db_session.add(product)
                    db_session.commit()


@click.command()
@click.option("--id", "grailed_id", default=None, required=True, help="grailed listing id")
@click.option("--user", "user_email", default="notsanjaykapoor@gmail.com", required=False, help="user email")
def grailed(grailed_id: int, user_email: str):
    """
    Ingest listing from grailed website.
    """
    _print_status(f"grailed id {grailed_id} ingest")

    code, html_path = services.grailed.download(grailed_id=grailed_id)

    if code == 0:
        _print_ok(f"grailed file '{html_path}' downloaded")        
    elif code == 409:
        _print_status(f"grailed file '{html_path}' exists")

    _print_status(f"grailed file '{html_path}' parse")

    parse_result = services.grailed.parse_html(html_path=html_path)

    print(parse_result)

    if parse_result.code != 0:
        pass

    with services.database.session.get() as db_session:
        user = services.users.get_by_email(db_session=db_session, email=user_email)

        product = services.products.get_by_grailed_id(
            db_session=db_session,
            grailed_id=grailed_id,
        )

        if product:
            _print_status(f"product {product.id} exists")
        else:
            product = services.products.create(
                db_session=db_session,
                grailed_id=grailed_id,
                key=ulid.new().str,
                name=parse_result.name,
                source_id=ulid.new().str,
                source_name=models.product.SOURCE_NOTME,
                state=models.product.STATE_DRAFT,
                user_id=user.id,
            )

            _print_ok(f"product {product.id} created")

        # check product images
        for image_url in parse_result.image_urls[0:2]:
            image_url = re.sub(r"\?.*", "", image_url)

            code, image = services.products.images.create(
                db_session=db_session,
                product=product,
                folder="/products",
                url=image_url,
            )

            if code == 409:
                _print_status(f"product {product.id} image {image.id} exists")
            else:
                _print_ok(f"product {product.id} image {image.id} created")

        services.products.sync_images(
            db_session=db_session,
            product=product,
        )

        if product.state != models.product.STATE_ACTIVE and product.image_count > 0:
            product.state = models.product.STATE_ACTIVE
            db_session.add(product)
            db_session.commit()


def _print_error(s: str):
    print("\x1b[1;31m" + s + "\x1b[0m", flush=True)


def _print_ok(s: str):
    print("\x1b[1;32m" + s + "\x1b[0m", flush=True)


def _print_status(s: str):
    print("\x1b[1;36m" + s + "\x1b[0m", flush=True)


cli.add_command(csv_sheet)
cli.add_command(grailed)

if __name__ == "__main__":
    cli()